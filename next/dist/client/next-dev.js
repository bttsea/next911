"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");var _Object$getOwnPropertyDescriptor=require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");var _Object$defineProperty=require("@babel/runtime-corejs2/core-js/object/define-property");var _WeakMap=require("@babel/runtime-corejs2/core-js/weak-map");var _=_interopRequireWildcard(require("./"));var next=_;var _eventSourcePolyfill=_interopRequireDefault(require("./dev/event-source-polyfill"));var _onDemandEntriesClient=_interopRequireDefault(require("./dev/on-demand-entries-client"));var _webpackHotMiddlewareClient=_interopRequireDefault(require("./dev/webpack-hot-middleware-client"));var _devBuildWatcher=_interopRequireDefault(require("./dev/dev-build-watcher"));var _prerenderIndicator=_interopRequireDefault(require("./dev/prerender-indicator"));function _getRequireWildcardCache(e){if("function"!=typeof _WeakMap)return null;var r=new _WeakMap(),t=new _WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=_Object$defineProperty&&_Object$getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?_Object$getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?_Object$defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}// Temporary workaround for the issue described here:
// https://github.com/zeit/next.js/issues/3775#issuecomment-407438123
// The runtimeChunk doesn't have dynamic import handling code when there hasn't been a dynamic import
// The runtimeChunk can't hot reload itself currently to correct it when adding pages using on-demand-entries
import('./dev/noop');
// Support EventSource on Internet Explorer 11
if(!window.EventSource){window.EventSource=_eventSourcePolyfill.default;}var{__NEXT_DATA__:{assetPrefix}}=window;var prefix=assetPrefix||'';var webpackHMR=(0,_webpackHotMiddlewareClient.default)({assetPrefix:prefix});window.next=next;(0,_.default)({webpackHMR}).then(emitter=>{(0,_onDemandEntriesClient.default)({assetPrefix:prefix});if(process.env.__NEXT_BUILD_INDICATOR)(0,_devBuildWatcher.default)();if(process.env.__NEXT_PRERENDER_INDICATOR&&// disable by default in electron
!(typeof process!=='undefined'&&'electron'in process.versions)){(0,_prerenderIndicator.default)();}// This is the fallback helper that removes Next.js' no-FOUC styles when
// CSS mode is enabled. This only really activates if you haven't created
// _any_ styles in your application yet.
;(window.requestAnimationFrame||setTimeout)(function(){for(var x=document.querySelectorAll('[data-next-hide-fouc]'),i=x.length;i--;){x[i].parentNode.removeChild(x[i]);}});var lastScroll;emitter.on('before-reactdom-render',_ref=>{var{Component,ErrorComponent}=_ref;// Remember scroll when ErrorComponent is being rendered to later restore it
if(!lastScroll&&Component===ErrorComponent){var{pageXOffset,pageYOffset}=window;lastScroll={x:pageXOffset,y:pageYOffset};}});emitter.on('after-reactdom-render',_ref2=>{var{Component,ErrorComponent}=_ref2;if(lastScroll&&Component!==ErrorComponent){// Restore scroll after ErrorComponent was replaced with a page component by HMR
var{x,y}=lastScroll;window.scroll(x,y);lastScroll=null;}});}).catch(err=>{console.error('Error was not caught',err);});