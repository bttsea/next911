"use strict";exports.__esModule=true;exports.store=void 0;var _unistore=_interopRequireDefault(require("next/dist/compiled/unistore"));var _stripAnsi=_interopRequireDefault(require("strip-ansi"));var Log=_interopRequireWildcard(require("./log"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e};}const store=exports.store=(0,_unistore.default)({appUrl:null,bootstrap:true});let lastStore={};function hasStoreChanged(nextStore){if([...new Set([...Object.keys(lastStore),...Object.keys(nextStore)])].every(key=>Object.is(lastStore[key],nextStore[key]))){return false;}lastStore=nextStore;return true;}store.subscribe(state=>{if(!hasStoreChanged(state)){return;}if(state.bootstrap){Log.wait('starting the development server ...');if(state.appUrl){Log.info(`waiting on ${state.appUrl} ...`);}return;}if(state.loading){Log.wait('compiling ...');return;}if(state.errors){Log.error(state.errors[0]);const cleanError=(0,_stripAnsi.default)(state.errors[0]);if(cleanError.indexOf('SyntaxError')>-1){const matches=cleanError.match(/\[.*\]=/);if(matches){for(const match of matches){const prop=(match.split(']').shift()||'').substr(1);console.log(`AMP bind syntax [${prop}]='' is not supported in JSX, use 'data-amp-bind-${prop}' instead. https://err.sh/zeit/next.js/amp-bind-jsx-alt`);}return;}}return;}if(state.warnings){Log.warn(state.warnings.join('\n\n'));if(state.appUrl){Log.info(`ready on ${state.appUrl}`);}return;}if(state.typeChecking){Log.info('bundled successfully, waiting for typecheck results ...');return;}Log.ready('compiled successfully'+(state.appUrl?` - ready on ${state.appUrl}`:''));});